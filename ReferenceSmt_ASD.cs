//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace TestDALiangWebService.ServiceReferenceSmt_ASD {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SmtEqipmentSoap", Namespace="http://tempuri.org/")]
    public partial class SmtEqipment : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckSsnRoutingOperationCompleted;
        
        private System.Threading.SendOrPostCallback WriteRoutingBySsnOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SmtEqipment() {
            this.Url = "http://192.168.31.200/mes_webservice_smt/SmtEqipment.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckSsnRoutingCompletedEventHandler CheckSsnRoutingCompleted;
        
        /// <remarks/>
        public event WriteRoutingBySsnCompletedEventHandler WriteRoutingBySsnCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckSsnRouting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckSsnRouting(string _ssn, string _mo, string _curr_stage, ref string errMsg) {
            object[] results = this.Invoke("CheckSsnRouting", new object[] {
                        _ssn,
                        _mo,
                        _curr_stage,
                        errMsg});
            errMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSsnRoutingAsync(string _ssn, string _mo, string _curr_stage, string errMsg) {
            this.CheckSsnRoutingAsync(_ssn, _mo, _curr_stage, errMsg, null);
        }
        
        /// <remarks/>
        public void CheckSsnRoutingAsync(string _ssn, string _mo, string _curr_stage, string errMsg, object userState) {
            if ((this.CheckSsnRoutingOperationCompleted == null)) {
                this.CheckSsnRoutingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSsnRoutingOperationCompleted);
            }
            this.InvokeAsync("CheckSsnRouting", new object[] {
                        _ssn,
                        _mo,
                        _curr_stage,
                        errMsg}, this.CheckSsnRoutingOperationCompleted, userState);
        }
        
        private void OnCheckSsnRoutingOperationCompleted(object arg) {
            if ((this.CheckSsnRoutingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSsnRoutingCompleted(this, new CheckSsnRoutingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WriteRoutingBySsn", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool WriteRoutingBySsn(string _ssn, string stage, string line, string _status, string errorcode, string userid, ref string errMsg) {
            object[] results = this.Invoke("WriteRoutingBySsn", new object[] {
                        _ssn,
                        stage,
                        line,
                        _status,
                        errorcode,
                        userid,
                        errMsg});
            errMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WriteRoutingBySsnAsync(string _ssn, string stage, string line, string _status, string errorcode, string userid, string errMsg) {
            this.WriteRoutingBySsnAsync(_ssn, stage, line, _status, errorcode, userid, errMsg, null);
        }
        
        /// <remarks/>
        public void WriteRoutingBySsnAsync(string _ssn, string stage, string line, string _status, string errorcode, string userid, string errMsg, object userState) {
            if ((this.WriteRoutingBySsnOperationCompleted == null)) {
                this.WriteRoutingBySsnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteRoutingBySsnOperationCompleted);
            }
            this.InvokeAsync("WriteRoutingBySsn", new object[] {
                        _ssn,
                        stage,
                        line,
                        _status,
                        errorcode,
                        userid,
                        errMsg}, this.WriteRoutingBySsnOperationCompleted, userState);
        }
        
        private void OnWriteRoutingBySsnOperationCompleted(object arg) {
            if ((this.WriteRoutingBySsnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteRoutingBySsnCompleted(this, new WriteRoutingBySsnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void CheckSsnRoutingCompletedEventHandler(object sender, CheckSsnRoutingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSsnRoutingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSsnRoutingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WriteRoutingBySsnCompletedEventHandler(object sender, WriteRoutingBySsnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WriteRoutingBySsnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WriteRoutingBySsnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591